{"title":"Applications","markdown":{"yaml":{"title":"Applications","format":"html","filters":["shinylive"]},"headingText":"Bee a Spelling Genius","containsRefs":false,"markdown":"\nFor now, this site contains only one application built with Shiny. I may extend it in the future if I create more.\n\n\n## About\n\nThis is a interactive app made to, help/improve player's of New York times [Spelling Bee](https://www.nytimes.com/puzzles/spelling-bee).\n\n\nIn the spelling bee, the player is given seven letters. One letter is marked in yellow.\n\nThe goal is to make as many words as possible from the seven letters. Every word should contain the yellow letter.\n\nScoring\n\n* A word of 4 letters earns one point.\n* Words longer than 4 letters earn additional points (the exact amount is to be determined).\n\n\n\nThe dictionary used is provided [Here](https://github.com/dwyl/english-words)\n under an open license.\n\nThe Spelling Bee uses a list of curated words. The dictionary is more like a reference for how words are spelled. For example, \"AAAA\" might appear in the dictionary but is unlikely to be included in the Spelling Bee.\n\nThere may also be words that are offensive or outdated. While they are correctly spelled, they probably wonâ€™t appear in the Spelling Bee.\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 800\n\n\nfrom shiny import *\n# For plot\nimport matplotlib.pyplot as plt\n# Get all words in the english diconary\nimport numpy as np\nimport requests\n# URL of the text file on GitHub\nurl = \"https://raw.githubusercontent.com/dwyl/english-words/refs/heads/master/words.txt\"\n\n# Fetch the file content\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Read the content of the file\n    file_content = response.text\n    # Split the content into a list of words\n    words_list = file_content.splitlines()\n    print(words_list)\nelse:\n    print(\"Failed to retrieve the file:\", response.status_code)\n\ndef check_word_canidat_early_stopping(\n        word:str,\n        yellow_chr:chr,\n        chr_list:list):\n    \"\"\"\n    This function return True ore False.\n    To be valid candidat a get true retrun, the input word\n    need to contain the yellow chr, and can not contain other chr that yellow and chr from the list of charater list\n    \n    Args:\n        word (str): The word that need to be ckecked.\n        yellow_chr (chr): a chr that all word must contain\n        chr_list (list): a list of chr that the word can be contain in.\n    Returns:\n        bool: True ore False based on if the word forfiels the conditions\n    \"\"\"\n    lover_yellow =yellow_chr.lower()\n    return_obj=False\n    is_word_combination_of_chr_list=False\n    is_yellow_chr_contained= False\n    lower_chars = [char.lower() for char in chr_list]\n    \n    for letter in word:\n        is_letter_contained= letter.lower() in lower_chars\n        if (is_letter_contained==False):\n            is_word_combination_of_chr_list=False\n            break\n        else:\n            is_word_combination_of_chr_list=True\n        if (is_yellow_chr_contained==False):\n            is_yellow_chr_contained=(lover_yellow==letter.lower())\n    \n    if(is_word_combination_of_chr_list==True and is_yellow_chr_contained==True):\n        return_obj =True\n    return return_obj\n\n\n\ndef get_word_candidates(\n        word_list:list,\n        yellow_chr: chr,\n        chr_list:list,\n        min_word_length:int = 4):\n    \"\"\"\n    This returns list containg alle candidat words, for the spelling bee game.\n\n    All word contain the yellow letter, and consist of combination yello and letter from the letter list.\n    All words is longer ore equal to min_word_length\n    \n    Args:\n        word_list (list): a list with string containg words to serach though\n        yellow_chr (chr): all word in return should contain this letter\n        chr_list (list): a list of chr that can be conatin a word in return\n    Returns:\n        list: a list of strings. all word should be combination of yellow chr and letter from the list.\n        \n    \"\"\"\n    return_objet = []\n    index_list=[] #this list contais the index of wich words is potensiel words in the index list.\n    allowed_chartes= chr_list + [yellow_chr]\n    # len word is not calculated but store in the type string so it fast to check if len of the word is les than min first\n    for i in range(len(word_list)):\n        word_for_examination=word_list[i]\n        if(len(word_for_examination)>=min_word_length):\n            if(check_word_canidat_early_stopping(word_for_examination,yellow_chr,allowed_chartes)==True):\n                return_objet.append(word_for_examination)\n                index_list.append(i)\n    return(return_objet)\n\n\n# Generat plots\n\ndef get_len_word_list(words_list:int):\n    list_len=[]\n    for word in words_list: list_len.append(len(word))\n    return list_len\n\n\n\n\n# Define the app UI\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"yellow_chr\", \"Choose one yellow letter\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=False),\n    ui.output_text_verbatim(\"yellow_chr_output\"),\n    ui.input_selectize(\"grey_chr\", \"Choose six grey letters\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=True),\n    ui.output_text_verbatim(\"grey_chr_output\"),\n    ui.output_text_verbatim(\"len_data_txt\"),\n    ui.output_plot(\"plot\"),\n    ui.output_ui(\"output_content\"),\n    ui.input_switch(\"switch\", \"Show word results\", False),  \n    ui.output_text_verbatim(\"word_list_output\")\n)\n\n# Define the app server logic\ndef server(input, output, session):\n    @reactive.Calc\n    def dataset():\n        # This function returns a dataset when 6 grey letters are selected\n        if len(input.grey_chr()) == 6:\n            return get_word_candidates(words_list, input.yellow_chr(),list(input.grey_chr()))\n        else:\n            return []\n    @reactive.Calc\n    def len_data():\n        len_data=get_len_word_list(dataset())\n        return len_data\n        \n    @output\n    @render.text\n    def yellow_chr_output():\n        return f\"The chosen yellow letter is {input.yellow_chr()}\"\n    @output\n    @render.text\n    def grey_chr_output():\n        if len(input.grey_chr()) != 6:\n            return f\"You need to choose 6 grey letters; currently, you have chosen {len(input.grey_chr())}.\"\n        else:\n            return \"You have chosen 6 grey letters.\"\n    @output\n    @render.text\n    def len_data_txt():\n        ret_ob=\"The data has not bin computed\"\n        if(len(input.grey_chr())==6):\n            ret_ob=f\"There are {len(dataset())} possible words with 4 or more letters\"\n        return ret_ob\n    @output\n    @render.plot(alt=\"A histogram of dataset values\")\n    def plot():    \n        fig, ax = plt.subplots()\n        if len(input.grey_chr()) == 6:\n            unique_values, counts = np.unique(len_data(), return_counts=True)\n            ax.bar(unique_values, counts, color='skyblue', edgecolor='black')\n            ax.set_title(\"Histogram of Word Candidates\")\n            ax.set_xlabel(\"Length of word\")\n            ax.set_ylabel(\"Count\")\n        else:\n            ax.text(0.5, 0.5, \"Please select 6 grey letters\", horizontalalignment='center', verticalalignment='center')\n        return fig\n    @output\n    @render.text\n    def word_list_output():\n        ret_ob=\"\"\n        if(input.switch()==True):\n            ret_ob=\"\\n\".join(dataset())\n        return ret_ob\n        \n    \n\napp = App(app_ui, server)\n\n\n```\n\n\n\n\n\n\n##  Version with the code\nHere is a version where the code can be seen\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n\nfrom shiny import *\n# For plot\nimport matplotlib.pyplot as plt\n# Get all words in the english diconary\nimport numpy as np\nimport requests\n# URL of the text file on GitHub\nurl = \"https://raw.githubusercontent.com/dwyl/english-words/refs/heads/master/words.txt\"\n\n# Fetch the file content\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Read the content of the file\n    file_content = response.text\n    # Split the content into a list of words\n    words_list = file_content.splitlines()\n    print(words_list)\nelse:\n    print(\"Failed to retrieve the file:\", response.status_code)\n\ndef check_word_canidat_early_stopping(\n        word:str,\n        yellow_chr:chr,\n        chr_list:list):\n    \"\"\"\n    This function return True ore False.\n    To be valid candidat a get true retrun, the input word\n    need to contain the yellow chr, and can not contain other chr that yellow and chr from the list of charater list\n    \n    Args:\n        word (str): The word that need to be ckecked.\n        yellow_chr (chr): a chr that all word must contain\n        chr_list (list): a list of chr that the word can be contain in.\n    Returns:\n        bool: True ore False based on if the word forfiels the conditions\n   \n    \"\"\"\n    lover_yellow =yellow_chr.lower()\n    return_obj=False\n    is_word_combination_of_chr_list=False\n    is_yellow_chr_contained= False\n    lower_chars = [char.lower() for char in chr_list]\n    \n    for letter in word:\n        is_letter_contained= letter.lower() in lower_chars\n        if (is_letter_contained==False):\n            is_word_combination_of_chr_list=False\n            break\n        else:\n            is_word_combination_of_chr_list=True\n        if (is_yellow_chr_contained==False):\n            is_yellow_chr_contained=(lover_yellow==letter.lower())\n    \n    if(is_word_combination_of_chr_list==True and is_yellow_chr_contained==True):\n        return_obj =True\n    return return_obj\n\n\n\ndef get_word_candidates(\n        word_list:list,\n        yellow_chr: chr,\n        chr_list:list,\n        min_word_length:int = 4):\n    \"\"\"\n    This returns list containg alle candidat words, for the spelling bee game.\n\n    All word contain the yellow letter, and consist of combination yello and letter from the letter list.\n    All words is longer ore equal to min_word_length\n    \n    Args:\n        word_list (list): a list with string containg words to serach though\n        yellow_chr (chr): all word in return should contain this letter\n        chr_list (list): a list of chr that can be conatin a word in return\n    Returns:\n        list: a list of strings. all word should be combination of yellow chr and letter from the list.\n        \n    \"\"\"\n    return_objet = []\n    index_list=[] #this list contais the index of wich words is potensiel words in the index list.\n    allowed_chartes= chr_list + [yellow_chr]\n    # len word is not calculated but store in the type string so it fast to check if len of the word is les than min first\n    for i in range(len(word_list)):\n        word_for_examination=word_list[i]\n        if(len(word_for_examination)>=min_word_length):\n            if(check_word_canidat_early_stopping(word_for_examination,yellow_chr,allowed_chartes)==True):\n                return_objet.append(word_for_examination)\n                index_list.append(i)\n    return(return_objet)\n\n\n# Generat plots\n\ndef get_len_word_list(words_list:int):\n    list_len=[]\n    for word in words_list: list_len.append(len(word))\n    return list_len\n\n\n\n\n# Define the app UI\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"yellow_chr\", \"Choose one yellow letter\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=False),\n    ui.output_text_verbatim(\"yellow_chr_output\"),\n    ui.input_selectize(\"grey_chr\", \"Choose six grey letters\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=True),\n    ui.output_text_verbatim(\"grey_chr_output\"),\n    ui.output_text_verbatim(\"len_data_txt\"),\n    ui.output_plot(\"plot\"),\n    ui.output_ui(\"output_content\"),\n    ui.input_switch(\"switch\", \"Show word results\", False),  \n    ui.output_text_verbatim(\"word_list_output\")\n)\n\n# Define the app server logic\ndef server(input, output, session):\n    @reactive.Calc\n    def dataset():\n        # This function returns a dataset when 6 grey letters are selected\n        if len(input.grey_chr()) == 6:\n            return get_word_candidates(words_list, input.yellow_chr(),list(input.grey_chr()))\n        else:\n            return []\n    @reactive.Calc\n    def len_data():\n        len_data=get_len_word_list(dataset())\n        return len_data\n        \n    @output\n    @render.text\n    def yellow_chr_output():\n        return f\"The chosen yellow letter is {input.yellow_chr()}\"\n    @output\n    @render.text\n    def grey_chr_output():\n        if len(input.grey_chr()) != 6:\n            return f\"You need to choose 6 grey letters; currently, you have chosen {len(input.grey_chr())}.\"\n        else:\n            return \"You have chosen 6 grey letters.\"\n    @output\n    @render.text\n    def len_data_txt():\n        ret_ob=\"The data has not bin computed\"\n        if(len(input.grey_chr())==6):\n            ret_ob=f\"There are {len(dataset())} possible words with 4 or more letters\"\n        return ret_ob\n    @output\n    @render.plot(alt=\"A histogram of dataset values\")\n    def plot():    \n        fig, ax = plt.subplots()\n        if len(input.grey_chr()) == 6:\n            unique_values, counts = np.unique(len_data(), return_counts=True)\n            ax.bar(unique_values, counts, color='skyblue', edgecolor='black')\n            ax.set_title(\"Histogram of Word Candidates\")\n            ax.set_xlabel(\"Length of word\")\n            ax.set_ylabel(\"Count\")\n        else:\n            ax.text(0.5, 0.5, \"Please select 6 grey letters\", horizontalalignment='center', verticalalignment='center')\n        return fig\n    @output\n    @render.text\n    def word_list_output():\n        ret_ob=\"\"\n        if(input.switch()==True):\n            ret_ob=\"\\n\".join(dataset())\n        return ret_ob\n        \n    \n\napp = App(app_ui, server)\n\n\n\n```\n\n## Made with Shiny for Python (Shiny Live)\nThis application is created using Shiny for Python (Shiny Live). There is also an R version available.\n\nWhat makes the Shiny Live version so appealing is that it allows embedding Python code into WebAssembly. This application runs Python directly from your personal computer, with the dictionary downloaded from a GitHub link.\n\nThe library support is somewhat limited.\n\nFor small projects that should be accessible to the public, I like Shiny Live because it doesnâ€™t require hosting a server for the backend.\n\nEstially the backend runs on you pc.\n\nTheir is som drawback, every aplication need the data to load in seperatly.\nAlle code and data is exeable for the user, documentasion is spars.\nIt hard to debug, since it reaktiv programing. \n\nBut overall, being able to create applications without needing to host a server is pretty cool.\n","srcMarkdownNoYaml":"\nFor now, this site contains only one application built with Shiny. I may extend it in the future if I create more.\n\n# Bee a Spelling Genius\n\n## About\n\nThis is a interactive app made to, help/improve player's of New York times [Spelling Bee](https://www.nytimes.com/puzzles/spelling-bee).\n\n\nIn the spelling bee, the player is given seven letters. One letter is marked in yellow.\n\nThe goal is to make as many words as possible from the seven letters. Every word should contain the yellow letter.\n\nScoring\n\n* A word of 4 letters earns one point.\n* Words longer than 4 letters earn additional points (the exact amount is to be determined).\n\n\n\nThe dictionary used is provided [Here](https://github.com/dwyl/english-words)\n under an open license.\n\nThe Spelling Bee uses a list of curated words. The dictionary is more like a reference for how words are spelled. For example, \"AAAA\" might appear in the dictionary but is unlikely to be included in the Spelling Bee.\n\nThere may also be words that are offensive or outdated. While they are correctly spelled, they probably wonâ€™t appear in the Spelling Bee.\n\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 800\n\n\nfrom shiny import *\n# For plot\nimport matplotlib.pyplot as plt\n# Get all words in the english diconary\nimport numpy as np\nimport requests\n# URL of the text file on GitHub\nurl = \"https://raw.githubusercontent.com/dwyl/english-words/refs/heads/master/words.txt\"\n\n# Fetch the file content\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Read the content of the file\n    file_content = response.text\n    # Split the content into a list of words\n    words_list = file_content.splitlines()\n    print(words_list)\nelse:\n    print(\"Failed to retrieve the file:\", response.status_code)\n\ndef check_word_canidat_early_stopping(\n        word:str,\n        yellow_chr:chr,\n        chr_list:list):\n    \"\"\"\n    This function return True ore False.\n    To be valid candidat a get true retrun, the input word\n    need to contain the yellow chr, and can not contain other chr that yellow and chr from the list of charater list\n    \n    Args:\n        word (str): The word that need to be ckecked.\n        yellow_chr (chr): a chr that all word must contain\n        chr_list (list): a list of chr that the word can be contain in.\n    Returns:\n        bool: True ore False based on if the word forfiels the conditions\n    \"\"\"\n    lover_yellow =yellow_chr.lower()\n    return_obj=False\n    is_word_combination_of_chr_list=False\n    is_yellow_chr_contained= False\n    lower_chars = [char.lower() for char in chr_list]\n    \n    for letter in word:\n        is_letter_contained= letter.lower() in lower_chars\n        if (is_letter_contained==False):\n            is_word_combination_of_chr_list=False\n            break\n        else:\n            is_word_combination_of_chr_list=True\n        if (is_yellow_chr_contained==False):\n            is_yellow_chr_contained=(lover_yellow==letter.lower())\n    \n    if(is_word_combination_of_chr_list==True and is_yellow_chr_contained==True):\n        return_obj =True\n    return return_obj\n\n\n\ndef get_word_candidates(\n        word_list:list,\n        yellow_chr: chr,\n        chr_list:list,\n        min_word_length:int = 4):\n    \"\"\"\n    This returns list containg alle candidat words, for the spelling bee game.\n\n    All word contain the yellow letter, and consist of combination yello and letter from the letter list.\n    All words is longer ore equal to min_word_length\n    \n    Args:\n        word_list (list): a list with string containg words to serach though\n        yellow_chr (chr): all word in return should contain this letter\n        chr_list (list): a list of chr that can be conatin a word in return\n    Returns:\n        list: a list of strings. all word should be combination of yellow chr and letter from the list.\n        \n    \"\"\"\n    return_objet = []\n    index_list=[] #this list contais the index of wich words is potensiel words in the index list.\n    allowed_chartes= chr_list + [yellow_chr]\n    # len word is not calculated but store in the type string so it fast to check if len of the word is les than min first\n    for i in range(len(word_list)):\n        word_for_examination=word_list[i]\n        if(len(word_for_examination)>=min_word_length):\n            if(check_word_canidat_early_stopping(word_for_examination,yellow_chr,allowed_chartes)==True):\n                return_objet.append(word_for_examination)\n                index_list.append(i)\n    return(return_objet)\n\n\n# Generat plots\n\ndef get_len_word_list(words_list:int):\n    list_len=[]\n    for word in words_list: list_len.append(len(word))\n    return list_len\n\n\n\n\n# Define the app UI\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"yellow_chr\", \"Choose one yellow letter\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=False),\n    ui.output_text_verbatim(\"yellow_chr_output\"),\n    ui.input_selectize(\"grey_chr\", \"Choose six grey letters\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=True),\n    ui.output_text_verbatim(\"grey_chr_output\"),\n    ui.output_text_verbatim(\"len_data_txt\"),\n    ui.output_plot(\"plot\"),\n    ui.output_ui(\"output_content\"),\n    ui.input_switch(\"switch\", \"Show word results\", False),  \n    ui.output_text_verbatim(\"word_list_output\")\n)\n\n# Define the app server logic\ndef server(input, output, session):\n    @reactive.Calc\n    def dataset():\n        # This function returns a dataset when 6 grey letters are selected\n        if len(input.grey_chr()) == 6:\n            return get_word_candidates(words_list, input.yellow_chr(),list(input.grey_chr()))\n        else:\n            return []\n    @reactive.Calc\n    def len_data():\n        len_data=get_len_word_list(dataset())\n        return len_data\n        \n    @output\n    @render.text\n    def yellow_chr_output():\n        return f\"The chosen yellow letter is {input.yellow_chr()}\"\n    @output\n    @render.text\n    def grey_chr_output():\n        if len(input.grey_chr()) != 6:\n            return f\"You need to choose 6 grey letters; currently, you have chosen {len(input.grey_chr())}.\"\n        else:\n            return \"You have chosen 6 grey letters.\"\n    @output\n    @render.text\n    def len_data_txt():\n        ret_ob=\"The data has not bin computed\"\n        if(len(input.grey_chr())==6):\n            ret_ob=f\"There are {len(dataset())} possible words with 4 or more letters\"\n        return ret_ob\n    @output\n    @render.plot(alt=\"A histogram of dataset values\")\n    def plot():    \n        fig, ax = plt.subplots()\n        if len(input.grey_chr()) == 6:\n            unique_values, counts = np.unique(len_data(), return_counts=True)\n            ax.bar(unique_values, counts, color='skyblue', edgecolor='black')\n            ax.set_title(\"Histogram of Word Candidates\")\n            ax.set_xlabel(\"Length of word\")\n            ax.set_ylabel(\"Count\")\n        else:\n            ax.text(0.5, 0.5, \"Please select 6 grey letters\", horizontalalignment='center', verticalalignment='center')\n        return fig\n    @output\n    @render.text\n    def word_list_output():\n        ret_ob=\"\"\n        if(input.switch()==True):\n            ret_ob=\"\\n\".join(dataset())\n        return ret_ob\n        \n    \n\napp = App(app_ui, server)\n\n\n```\n\n\n\n\n\n\n##  Version with the code\nHere is a version where the code can be seen\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n\nfrom shiny import *\n# For plot\nimport matplotlib.pyplot as plt\n# Get all words in the english diconary\nimport numpy as np\nimport requests\n# URL of the text file on GitHub\nurl = \"https://raw.githubusercontent.com/dwyl/english-words/refs/heads/master/words.txt\"\n\n# Fetch the file content\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Read the content of the file\n    file_content = response.text\n    # Split the content into a list of words\n    words_list = file_content.splitlines()\n    print(words_list)\nelse:\n    print(\"Failed to retrieve the file:\", response.status_code)\n\ndef check_word_canidat_early_stopping(\n        word:str,\n        yellow_chr:chr,\n        chr_list:list):\n    \"\"\"\n    This function return True ore False.\n    To be valid candidat a get true retrun, the input word\n    need to contain the yellow chr, and can not contain other chr that yellow and chr from the list of charater list\n    \n    Args:\n        word (str): The word that need to be ckecked.\n        yellow_chr (chr): a chr that all word must contain\n        chr_list (list): a list of chr that the word can be contain in.\n    Returns:\n        bool: True ore False based on if the word forfiels the conditions\n   \n    \"\"\"\n    lover_yellow =yellow_chr.lower()\n    return_obj=False\n    is_word_combination_of_chr_list=False\n    is_yellow_chr_contained= False\n    lower_chars = [char.lower() for char in chr_list]\n    \n    for letter in word:\n        is_letter_contained= letter.lower() in lower_chars\n        if (is_letter_contained==False):\n            is_word_combination_of_chr_list=False\n            break\n        else:\n            is_word_combination_of_chr_list=True\n        if (is_yellow_chr_contained==False):\n            is_yellow_chr_contained=(lover_yellow==letter.lower())\n    \n    if(is_word_combination_of_chr_list==True and is_yellow_chr_contained==True):\n        return_obj =True\n    return return_obj\n\n\n\ndef get_word_candidates(\n        word_list:list,\n        yellow_chr: chr,\n        chr_list:list,\n        min_word_length:int = 4):\n    \"\"\"\n    This returns list containg alle candidat words, for the spelling bee game.\n\n    All word contain the yellow letter, and consist of combination yello and letter from the letter list.\n    All words is longer ore equal to min_word_length\n    \n    Args:\n        word_list (list): a list with string containg words to serach though\n        yellow_chr (chr): all word in return should contain this letter\n        chr_list (list): a list of chr that can be conatin a word in return\n    Returns:\n        list: a list of strings. all word should be combination of yellow chr and letter from the list.\n        \n    \"\"\"\n    return_objet = []\n    index_list=[] #this list contais the index of wich words is potensiel words in the index list.\n    allowed_chartes= chr_list + [yellow_chr]\n    # len word is not calculated but store in the type string so it fast to check if len of the word is les than min first\n    for i in range(len(word_list)):\n        word_for_examination=word_list[i]\n        if(len(word_for_examination)>=min_word_length):\n            if(check_word_canidat_early_stopping(word_for_examination,yellow_chr,allowed_chartes)==True):\n                return_objet.append(word_for_examination)\n                index_list.append(i)\n    return(return_objet)\n\n\n# Generat plots\n\ndef get_len_word_list(words_list:int):\n    list_len=[]\n    for word in words_list: list_len.append(len(word))\n    return list_len\n\n\n\n\n# Define the app UI\napp_ui = ui.page_fluid(\n    ui.input_selectize(\"yellow_chr\", \"Choose one yellow letter\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=False),\n    ui.output_text_verbatim(\"yellow_chr_output\"),\n    ui.input_selectize(\"grey_chr\", \"Choose six grey letters\", \n                       [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"], \n                       multiple=True),\n    ui.output_text_verbatim(\"grey_chr_output\"),\n    ui.output_text_verbatim(\"len_data_txt\"),\n    ui.output_plot(\"plot\"),\n    ui.output_ui(\"output_content\"),\n    ui.input_switch(\"switch\", \"Show word results\", False),  \n    ui.output_text_verbatim(\"word_list_output\")\n)\n\n# Define the app server logic\ndef server(input, output, session):\n    @reactive.Calc\n    def dataset():\n        # This function returns a dataset when 6 grey letters are selected\n        if len(input.grey_chr()) == 6:\n            return get_word_candidates(words_list, input.yellow_chr(),list(input.grey_chr()))\n        else:\n            return []\n    @reactive.Calc\n    def len_data():\n        len_data=get_len_word_list(dataset())\n        return len_data\n        \n    @output\n    @render.text\n    def yellow_chr_output():\n        return f\"The chosen yellow letter is {input.yellow_chr()}\"\n    @output\n    @render.text\n    def grey_chr_output():\n        if len(input.grey_chr()) != 6:\n            return f\"You need to choose 6 grey letters; currently, you have chosen {len(input.grey_chr())}.\"\n        else:\n            return \"You have chosen 6 grey letters.\"\n    @output\n    @render.text\n    def len_data_txt():\n        ret_ob=\"The data has not bin computed\"\n        if(len(input.grey_chr())==6):\n            ret_ob=f\"There are {len(dataset())} possible words with 4 or more letters\"\n        return ret_ob\n    @output\n    @render.plot(alt=\"A histogram of dataset values\")\n    def plot():    \n        fig, ax = plt.subplots()\n        if len(input.grey_chr()) == 6:\n            unique_values, counts = np.unique(len_data(), return_counts=True)\n            ax.bar(unique_values, counts, color='skyblue', edgecolor='black')\n            ax.set_title(\"Histogram of Word Candidates\")\n            ax.set_xlabel(\"Length of word\")\n            ax.set_ylabel(\"Count\")\n        else:\n            ax.text(0.5, 0.5, \"Please select 6 grey letters\", horizontalalignment='center', verticalalignment='center')\n        return fig\n    @output\n    @render.text\n    def word_list_output():\n        ret_ob=\"\"\n        if(input.switch()==True):\n            ret_ob=\"\\n\".join(dataset())\n        return ret_ob\n        \n    \n\napp = App(app_ui, server)\n\n\n\n```\n\n## Made with Shiny for Python (Shiny Live)\nThis application is created using Shiny for Python (Shiny Live). There is also an R version available.\n\nWhat makes the Shiny Live version so appealing is that it allows embedding Python code into WebAssembly. This application runs Python directly from your personal computer, with the dictionary downloaded from a GitHub link.\n\nThe library support is somewhat limited.\n\nFor small projects that should be accessible to the public, I like Shiny Live because it doesnâ€™t require hosting a server for the backend.\n\nEstially the backend runs on you pc.\n\nTheir is som drawback, every aplication need the data to load in seperatly.\nAlle code and data is exeable for the user, documentasion is spars.\nIt hard to debug, since it reaktiv programing. \n\nBut overall, being able to create applications without needing to host a server is pretty cool.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"filters":["shinylive"],"output-file":"applications.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","title":"Applications"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}